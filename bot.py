import os
import json
import requests
import time
from datetime import datetime
from bs4 import BeautifulSoup
from flask import Flask
from threading import Thread
from telegram import Bot, Update, BotCommand
from telegram.ext import Updater, CommandHandler, CallbackContext


# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
OWNER_ID = os.getenv("OWNER_ID")
INTERVAL_FILE = "interval.txt"
LAST_CHECK_FILE = "last_check.json"
SOURCES_FILE = "sources.json"

# === KEEP-ALIVE ===
app = Flask("")


@app.route("/")
def home():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"


def run():
    app.run(host="0.0.0.0", port=8080)


def keep_alive():
    Thread(target=run).start()


# === –£–¢–ò–õ–ò–¢–´ ===
def get_interval_minutes():
    try:
        with open(INTERVAL_FILE, 'r') as f:
            return int(f.read().strip())
    except:
        return 15


def load_sources():
    with open(SOURCES_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)


def load_last_check():
    if os.path.exists(LAST_CHECK_FILE):
        with open(LAST_CHECK_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}


def save_last_check(data):
    with open(LAST_CHECK_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


# === –ü–†–û–í–ï–†–ö–ê –ò–°–¢–û–ß–ù–ò–ö–û–í ===
def check_all_sources(bot: Bot = None) -> list:
    last_data = load_last_check()
    sources = load_sources()
    results = []

    for source in sources:
        original_name = source.get("name")  # –∏–º—è –∏–∑ sources.json, –∫–ª—é—á –¥–ª—è last_check
        url = source.get("url")
        parsed_name = original_name  # –ø–æ–∫–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç

        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            soup = BeautifulSoup(response.text, 'html.parser')

            # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            tag = soup.find('div', class_='updatedAtDate')
            current_update_line = tag.text.strip() if tag else None

            # –ü–∞—Ä—Å–∏–º –Ω–∞—Å—Ç–æ—è—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ <div class="flx Fonkartochka"><h1>...</h1>
            name_block = soup.find('div', class_='flx Fonkartochka')
            h1 = name_block.find('h1') if name_block else None
            parsed_name = h1.text.strip() if h1 else original_name

        except Exception as e:
            error_msg = f"‚ùå [{original_name}] –û—à–∏–±–∫–∞:\n{str(e)}\n{url}"
            print(error_msg)
            if bot:
                bot.send_message(chat_id=CHAT_ID, text=error_msg)
            continue

        if not current_update_line:
            msg = f"‚ö†Ô∏è [{parsed_name}] –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:\n{url}"
            print(msg)
            if bot:
                bot.send_message(chat_id=CHAT_ID, text=msg)
            continue

        saved_line = last_data.get(original_name)

        if saved_line != current_update_line:
            print(f"[{parsed_name}] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ.")
            message = (f"üîî –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: *{parsed_name}*\n"
                       f"`{current_update_line}`\n"
                       f"[–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É]({url})")
            if bot:
                bot.send_message(chat_id=CHAT_ID,
                                 text=message,
                                 parse_mode='Markdown')
            last_data[original_name] = current_update_line
            results.append((parsed_name, True))
        else:
            print(f"[{parsed_name}] –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.")
            results.append((parsed_name, False))

    save_last_check(last_data)
    return results


# === –ö–û–ú–ê–ù–î–´ ===
def start(update: Update, context: CallbackContext):
    update.message.reply_text(
        "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/check ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n"
        "/setinterval <–º–∏–Ω> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)")


def manual_check(update: Update, context: CallbackContext):
    update.message.reply_text("üîç –ü—Ä–æ–≤–µ—Ä—è—é –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏...")
    results = check_all_sources(context.bot)

    updated = [name for name, changed in results if changed]
    if updated:
        update.message.reply_text(
            f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã: {', '.join(updated)}")
    elif results:
        update.message.reply_text("‚ÑπÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏.")


def set_interval(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    if user_id != OWNER_ID:
        update.message.reply_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏–∑–º–µ–Ω—è—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª.")
        return

    try:
        minutes = int(context.args[0])
        if minutes < 1 or minutes > 1440:
            raise ValueError
        with open(INTERVAL_FILE, 'w') as f:
            f.write(str(minutes))
        update.message.reply_text(
            f"‚úÖ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {minutes} –º–∏–Ω—É—Ç.")
    except:
        update.message.reply_text("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setinterval <–º–∏–Ω—É—Ç>")


# === –ê–í–¢–û-–ü–†–û–í–ï–†–ö–ê ===
def auto_check(bot: Bot):
    while True:
        check_all_sources(bot)
        time.sleep(get_interval_minutes() * 60)


# === –ó–ê–ü–£–°–ö ===
def main():
    keep_alive()
    updater = Updater(BOT_TOKEN)
    dp = updater.dispatcher

    updater.bot.set_my_commands([
        BotCommand("start", "–°—Ç–∞—Ä—Ç –∏ —Å–ø—Ä–∞–≤–∫–∞"),
        BotCommand("check", "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"),
        BotCommand("setinterval", "–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª (—Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞)")
    ])

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("check", manual_check))
    dp.add_handler(CommandHandler("setinterval", set_interval))

    Thread(target=auto_check, args=(updater.bot, ), daemon=True).start()
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
